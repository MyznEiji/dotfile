# dein.vim command
[[plugins]]
repo = 'haya14busa/dein-command.vim'
on_cmd = 'Dein'


[[plugins]]
repo = 'Shougo/unite.vim'



# file searce
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim']
on_event = 'BufRead'
hook_add = '''
nmap <silent> <C-u><C-t> :<C-u>Denite filetype<CR>
nmap <silent> <C-u><C-p> :<C-u>Denite file_rec<CR>
nmap <silent> <C-u><C-j> :<C-u>Denite line<CR>
nmap <silent> <C-u><C-g> :<C-u>Denite grep<CR>
nmap <silent> <C-u><C-]> :<C-u>DeniteCursorWord grep<CR>
nmap <silent> <C-u><C-u> :<C-u>Denite file_mru<CR>
nmap <silent> <C-u><C-y> :<C-u>Denite neoyank<CR>
nmap <silent> <C-u><C-r> :<C-u>Denite -resume<CR>
nmap <silent> <C-u>; :<C-u>Denite -resume -immediately -select=+1<CR>
nmap <silent> <C-u>- :<C-u>Denite -resume -immediately -select=-1<CR>
nmap <silent> <C-u><C-d> :<C-u>call denite#start([{'name': 'file_rec', 'args': ['~/dotfiles']}])<CR>
nnoremap ml :<C-u>call denite#start([{'name': 'file_rec', 'args': [g:memolist_path]}])<CR>
'''
hook_post_source = '''
call denite#custom#var('file_rec', 'command',
\ ['pt', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', ''])
call denite#custom#var('grep', 'command',
\ ['pt', '--nogroup', '--nocolor', '--smart-case', '--hidden'])
call denite#custom#var('grep', 'default_opts', [])
call denite#custom#var('grep', 'recursive_opts', [])
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_source = 'denite.nvim'

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'denite.nvim'


# emacs key
[[plugins]]
repo = 'kentarosasaki/vim-emacs-bindings'
on_i = 1

# スニペット
[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  inoremap <expr><tab> pumvisible() ? "\<C-n>" :
        \ neosnippet#expandable_or_jumpable() ?
        \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''
on_i = 1

[[plugins]]
repo = 'Shougo/neosnippet'
hook_source = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''
on_i  = 1
on_ft = ['snippet']
depends = ['neosnippet-snippets']




[[plugins]]
repo = 'majutsushi/tagbar'
on_event = ['BufEnter']
hook_add = '''
    nmap <F8> :TagbarToggle<CR>
'''




[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'osyo-manga/vim-precious'
on_ft = ["toml"]
depends = ['context_filetype.vim']
hook_add = '''
" autocmd VimEnter * :PreciousSwitch
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_ft = ["toml"]




[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml']
on_source = ['deoplete.nvim']


[[plugins]]
repo = 'thinca/vim-quickrun'
on_event = ['BufEnter']
hook_add = '''
    let g:quickrun_config = get(g:, 'quickrun_config', {})
    let g:quickrun_config._ = {
          \ 'runner':                          'vimproc',
          \ 'runner/vimproc/updatetime':       60,
          \ 'outputter':                       'error',
          \ 'outputter/error/success':         'buffer',
          \ 'outputter/error/error':           'quickfix',
          \ 'outputter/buffer/split':          ':rightbelow 8sp',
          \ 'outputter/buffer/close_on_empty': 1,
          \}
'''
depends = ['vimproc.vim']

[[plugins]]
repo = 'Shougo/vimproc.vim'
on_event = ['BufEnter']
build = 'make'


[[plugins]]
repo = 'junegunn/vim-easy-align'
on_event = ['BufEnter']
hook_add = '''
    " Start interactive EasyAlign in visual mode (e.g. vipga)
    xmap ga <Plug>(EasyAlign)
    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)
'''


[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1




[[plugins]] #display color in css file
repo = 'ap/vim-css-color'
on_ft = ['css']
