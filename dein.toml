
[[plugins]]
repo = 'Shougo/dein.vim'


# スニペットの読み込み
[[plugins]]
repo = 'Shougo/neosnippet-snippets'
 
# 補完
[[plugins]]
repo = 'Shougo/neocomplete.vim'


# treeの表示、ウィンドウ関係のマッピング
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  " startup NerdTree after vim enter
  " autocmd VimEnter * execute 'NERDTree'
  " open or close NerdTree with Ctrl+e
  " map <C-e> :NERDTreeToggle<CR>
  " show hidden file
  let NERDTreeShowHidden = 1
  " set window width size
  let g:NERDTreeWinSize=20
  " キーマップの設定
  nnoremap s <Nop>
  nnoremap sj <C-w>j
  nnoremap sk <C-w>k
  nnoremap sl <C-w>l
  nnoremap sh <C-w>h
  nnoremap sJ <C-w>J
  nnoremap sK <C-w>K
  nnoremap sL <C-w>L
  nnoremap sH <C-w>H
  nnoremap sn gt
  nnoremap sp gT
  nnoremap sr <C-w>r
  nnoremap s= <C-w>=
  nnoremap sw <C-w>w
  nnoremap so <C-w>_<C-w>|
  nnoremap sO <C-w>=
  nnoremap sN :<C-u>bn<CR>
  nnoremap sP :<C-u>bp<CR>
  nnoremap st :<C-u>tabnew<CR>
  nnoremap sT :<C-u>Unite tab<CR>
  nnoremap ss :<C-u>sp<CR>
  nnoremap sv :<C-u>vs<CR>
  nnoremap sq :<C-u>q<CR>
  nnoremap sQ :<C-u>bd<CR>
  nnoremap sb :<C-u>Unite buffer_tab -buffer-name=file<CR>
  nnoremap sB :<C-u>Unite buffer -buffer-name=file<CR>
  nnoremap s- <C-w>-
  nnoremap s+ <C-w>+
" when open nerdtree, the cursor is on the file
function s:MoveToFileAtStart()
  call feedkeys("\<Space>")
  call feedkeys("\s")
  call feedkeys("\l")
endfunction
autocmd VimEnter *  NERDTree | call s:MoveToFileAtStart() 
'''

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
hook_add = '''
   " トグル設定
   map <C-e> <plug>NERDTreeTabsToggle<CR>
   " 起動時有効
   let g:nerdtree_tabs_open_on_console_startup=1
   " 起動時にファイルにカーソルを合わせる
   function! s:MoveCursorAtStart()
       call feedkeys("\<C-l>")
   endfunction
   autocmd VimEnter * NERDTree | call s:MoveCursorAtStart()
'''
depends = ['nerdtree']



# 言語ごとに文法チェックの設定
[[plugins]]
repo = 'scrooloose/syntastic'
hook_add = '''
" --------------------------------
" syntastic
" --------------------------------
set statusline+=%#warningmsg#
set statusline+=%*

let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_mode_map = { 'mode': 'active', 'active_filetypes': [
  \ 'ruby', 'python', 'javascript','coffee', 'scss', 'html', 'haml', 'slim', 'sh',
  \ 'spec', 'vim', 'zsh', 'sass', 'eruby'] }

let g:syntastic_javascript_checkers=['eslint']
let g:syntastic_coffee_checkers = ['coffeelint']
let g:syntastic_scss_checkers = ['scss_lint']
let g:syntastic_ruby_checkers = ['rubocop']
let g:syntastic_python_checkers = ['pylint']


let g:syntastic_error_symbol='✗'
let g:syntastic_style_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_style_warning_symbol = '⚠'
'''


# ステータスバーの設定
[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
    " タブラインの表示
    let g:airline#extensions#tabline#enabled = 1
    " （タブが一個の場合）バッファのリストをタブラインに表示する機能をオフ
    let g:airline#extensions#tabline#show_buffers = 0
    " 0でそのタブで開いてるウィンドウ数、1で左のタブから連番
    let g:airline#extensions#tabline#tab_nr_type = 1
    " パワーラインフォントの使用
    let g:airline_powerline_fonts = 1
    " aleの表示
    let g:airline#extensions#ale#enabled = 1
    " Do not collapse the status line while having multiple windows
    let g:airline_inactive_collapse = 0
    " tagbarの表示
    let g:airline#extensions#tagbar#enabled = 1
'''
depends = ['vim-airline_themes']


# ステータスバーの設定
[[plugins]]
repo = 'vim-airline/vim-airline-themes'


# インデントの表示
[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  " indent line type |
  set list lcs=tab:\|\
'''

# ファイル検索(Ctr + p)
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
  " show hidden file
  let g:ctrlp_show_hidden = 1
'''

# コメントアウト
[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
  " tcommentで使用する形式を追加
  if !exists('g:tcomment_types')
    let g:tcomment_types = {}
  endif
  let g:tcomment_types = {
        \'php_surround' : "<?php %s ?>",
        \'eruby_surround' : "<%% %s %%>",
        \'eruby_surround_minus' : "<%% %s -%%>",
        \'eruby_surround_equality' : "<%%= %s %%>",
  \}
  
  " マッピングを追加
  function! SetErubyMapping2()
    nmap <buffer> <C-_>c :TCommentAs eruby_surround<CR>
    nmap <buffer> <C-_>- :TCommentAs eruby_surround_minus<CR>
    nmap <buffer> <C-_>= :TCommentAs eruby_surround_equality<CR>
  
    vmap <buffer> <C-_>c :TCommentAs eruby_surround<CR>
    vmap <buffer> <C-_>- :TCommentAs eruby_surround_minus<CR>
    vmap <buffer> <C-_>= :TCommentAs eruby_surround_equality<CR>
  endfunction
  
  " erubyのときだけ設定を追加
  au FileType eruby call SetErubyMapping2()
  " phpのときだけ設定を追加
  au FileType php nmap <buffer><C-_>c :TCommentAs php_surround<CR>
  au FileType php vmap <buffer><C-_>c :TCommentAs php_surround<CR>
'''


# ウインドウの大きさを変更する
[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
  " ウィンドウサイズの変更キーを簡易化する
  " [C-w],[+]または、[C-w],[-]
  call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
  call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
  call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>-')
  call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>+')
  call submode#map('winsize', 'n', '', '>', '<C-w>>')
  call submode#map('winsize', 'n', '', '<', '<C-w><')
  call submode#map('winsize', 'n', '', '+', '<C-w>-')
  call submode#map('winsize', 'n', '', '-', '<C-w>+')
'''


# カラースキームを設定
[[plugins]]
repo = 'tyrannicaltoucan/vim-deep-space'
hook_add = '''
  set background=dark
  set termguicolors
  colorscheme deep-space
'''

