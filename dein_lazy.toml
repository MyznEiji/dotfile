#------------------------------------
# plugins for completion
#------------------------------------
[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_i = 1
depends = ['neosnippet-snippets']
hook_add = '''
  " Plugin key-mappings.  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump) xmap <C-k>     <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  " imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
        \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
        \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  " For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif

  "set snippet file dir
  let g:neosnippet#snippets_directory='~/.vim/snippets'
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1
#------------------------------------
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ["html", "css", "php"]
hook_add = '''
  "keybinding with <ctrl+t+,>
  let g:user_emmet_leader_key='<C-t>'
'''

[[plugins]]
repo = 'ap/vim-css-color'
on_ft = ['css']

[[plugins]] #js syntax
repo = 'othree/yajs.vim'
on_ft = ['js']

[[plugins]] #js fommater
repo = 'prettier/vim-prettier'
on_ft = ['js']
hook_add = '''
  let g:prettier#quickfix_enabled = 0
  let g:prettier#autoformat = 0
  autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.scss,*.json,*.graphql,*.vue Prettier
'''
#------------------------------------

#------------------------------------
# for php
#------------------------------------
[[plugins]] #debugger interface with xdebug
repo = 'joonty/vdebug'
on_ft = ['php']

[[plugins]] #blade syntax
repo = 'jwalton512/vim-blade'
on_ft = ['php', 'blade']

[[plugins]] #php formatter
repo = 'beanworks/vim-phpfmt'
on_ft = ['php']

[[plugins]] #php completion
repo = 'lvht/phpcd.vim'
on_ft = ['php']
#------------------------------------

#------------------------------------
# plugins for markdown
#------------------------------------
[[plugins]] # for markdown preview①
repo = 'kannokanno/previm'
on_ft = ["md", "markdown"]
depends = ['open-browser.vim']
hook_add = '''
  " .md file means that is markdown file
  autocmd BufRead,BufNewFile *.md  set filetype=markdown
  " realtime preview. 0 is disable(default).
  let g:previm_enable_realtime = 1
  " don't show header
  let g:previm_show_header = 0
  " disable default css
  let g:previm_disable_default_css = 1
  " github-dark
  let g:previm_custom_css_path = '/Users/daikirokuyama/div/curriculum_material/github-dark.css'
  " github-light
  " let g:previm_custom_css_path = '/Users/daikirokuyama/div/curriculum_material/github-light.css'
  
'''

[[plugins]] # for markdown preview②
repo = 'tyru/open-browser.vim'
on_ft = ["md", "markdown"]

[[plugins]] # syntax for markdown
repo = 'rcmdnk/vim-markdown'
on_ft = ["md", "markdown"]
hook_add = '''
  " disable the folding configuration
  let g:vim_markdown_folding_disabled = 1
  " disable conceal regardless of conceal level setting
  let g:vim_markdown_conceal = 0
'''
#------------------------------------

#------------------------------------
# toml syntax
#------------------------------------
[[plugins]]
repo = 'osyo-manga/vim-precious'
on_ft = ["toml"]
depends = ['context_filetype.vim']
hook_add = '''
" autocmd VimEnter * :PreciousSwitch
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_ft = ["toml"]

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = ['toml']
#------------------------------------
